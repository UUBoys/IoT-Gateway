[
    {
        "id": "f91b44df1f91c91f",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4b0f4470b4d73f44",
        "type": "group",
        "z": "f91b44df1f91c91f",
        "name": "Report soil moisture group",
        "style": {
            "label": true
        },
        "nodes": [
            "cd6cb4f9d29b8e80",
            "ebc6a40358fe234c",
            "54395557d12229de",
            "202c8fb86292de3d",
            "1b81ba1b185d7620",
            "a4cd7baee907e2dd",
            "f3b598a5e0fb466f",
            "f1a0749154ad4322",
            "aaf14de934eb9ece",
            "ae37b45ed5f72113"
        ],
        "x": 54,
        "y": 299,
        "w": 1192,
        "h": 242
    },
    {
        "id": "9344ba63619b3c33",
        "type": "group",
        "z": "f91b44df1f91c91f",
        "name": "Pair group",
        "style": {
            "label": true
        },
        "nodes": [
            "1e72356b85aa1e29",
            "f85695bcf86d9c61",
            "e55a3f566dbc229f",
            "dc0a6be2bf57fb1e",
            "d61da5b81aae134e",
            "9d31bb5b7a0c073c",
            "e596a3b9ade0f5a7",
            "5ff7059934ce5ca9",
            "dcd990d19e1f7917",
            "b3eb380118ebd413",
            "8ef6f2e598ce6935",
            "df5cfd968fed5abf",
            "aa6c62498fbc8d0f"
        ],
        "x": 34,
        "y": 19,
        "w": 1312,
        "h": 262
    },
    {
        "id": "5e84fe58b7253d78",
        "type": "group",
        "z": "f91b44df1f91c91f",
        "name": "Do server tasks",
        "style": {
            "label": true
        },
        "nodes": [
            "36b972178810cc08",
            "f4093cde46dad3ea",
            "8e9f9762c7e8fb29",
            "e13ccc0703f0efd1",
            "6fe6ec2c0ac23a97",
            "ba694833ea5ff62d",
            "505c812762911485"
        ],
        "x": 54,
        "y": 559,
        "w": 932,
        "h": 162
    },
    {
        "id": "4aebed7fa574b00d",
        "type": "serial-port",
        "name": "Hardwario",
        "serialport": "/dev/tty.usbserial-110",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "\\r",
        "responsetimeout": "10000"
    },
    {
        "id": "1e72356b85aa1e29",
        "type": "inject",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "Start-up",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"deviceID\":\"09G1956\",\"messageType\":\"init\"}",
        "payloadType": "json",
        "x": 140,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "f85695bcf86d9c61",
        "type": "http request",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "get device",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 370,
        "y": 120,
        "wires": [
            [
                "e55a3f566dbc229f"
            ]
        ]
    },
    {
        "id": "e55a3f566dbc229f",
        "type": "switch",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "Check Paired",
        "property": "payload.isPaired",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 60,
        "wires": [
            [
                "b3eb380118ebd413"
            ],
            [
                "dcd990d19e1f7917"
            ]
        ]
    },
    {
        "id": "dc0a6be2bf57fb1e",
        "type": "http request",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "Try to pair the device",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 680,
        "y": 100,
        "wires": [
            [
                "d61da5b81aae134e"
            ]
        ]
    },
    {
        "id": "d61da5b81aae134e",
        "type": "switch",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "paired successfully",
        "property": "payload.success",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 140,
        "wires": [
            [
                "b3eb380118ebd413"
            ],
            [
                "9d31bb5b7a0c073c"
            ]
        ]
    },
    {
        "id": "9d31bb5b7a0c073c",
        "type": "delay",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 180,
        "wires": [
            [
                "dc0a6be2bf57fb1e"
            ]
        ]
    },
    {
        "id": "cd6cb4f9d29b8e80",
        "type": "json",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": true,
        "x": 490,
        "y": 400,
        "wires": [
            [
                "ebc6a40358fe234c"
            ]
        ]
    },
    {
        "id": "ebc6a40358fe234c",
        "type": "function",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "aggregate moisture procentage",
        "func": "const {deviceID, value, messageType} = msg?.payload;\n\nif(!value || messageType != \"moistureProcentage\")\n    return null\nconst devices = global.get('Devices') || [];\n\nconst device = devices.find((device) => device.id === deviceID);\n\nif (device){\n    device.reports.push({\n        type: \"moisture\",\n        value\n    });\n\n    global.set('Devices', devices)  \n}       \nconsole.log(devices);\nreturn null;                              \n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "54395557d12229de",
        "type": "inject",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "inject every hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 500,
        "wires": [
            [
                "202c8fb86292de3d"
            ]
        ]
    },
    {
        "id": "202c8fb86292de3d",
        "type": "function",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "calculate average moisture procentage",
        "func": "const devices = global.get(\"Devices\") || [];\n\nif(devices.length == 0)\n    return null;\n\nconst newMessages = devices.map(device => {\n    const reports = device.reports ?? [];\n\n    const moistureReports = reports.filter((report) => report.type == \"moisture\");\n\n    if (moistureReports.length === 0) {\n        return null;\n    }\n\n    const sum = moistureReports.reduce((acc, cur) => acc + cur.value, 0);\n    console.log(sum);\n    const average = sum / moistureReports.length;\n    console.log(average);\n\n    device.reports = [];\n\n    const payload = {\n        deviceID: device.id,\n        type: \"moisturePercentages\",\n        value: average,\n        timeStamp: new Date().toISOString()\n    };\n\n    return { payload: payload };\n});\n\nglobal.set(\"Devices\", devices) || [];\n\n\nmsg.payload = newMessages.filter(msg => msg !== null);\nflow.set(\"allMessagesSent\", false);\nflow.set(\"messagesToSend\", msg.payload);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 500,
        "wires": [
            [
                "aaf14de934eb9ece"
            ]
        ]
    },
    {
        "id": "1b81ba1b185d7620",
        "type": "http request",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "body",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1130,
        "y": 500,
        "wires": [
            [
                "aaf14de934eb9ece",
                "ae37b45ed5f72113"
            ]
        ]
    },
    {
        "id": "a4cd7baee907e2dd",
        "type": "comment",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "Report average moisture procentage every hour",
        "info": "",
        "x": 340,
        "y": 340,
        "wires": []
    },
    {
        "id": "36b972178810cc08",
        "type": "inject",
        "z": "f91b44df1f91c91f",
        "g": "5e84fe58b7253d78",
        "name": "inject every hour",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 600,
        "wires": [
            [
                "f4093cde46dad3ea"
            ]
        ]
    },
    {
        "id": "f4093cde46dad3ea",
        "type": "switch",
        "z": "f91b44df1f91c91f",
        "g": "5e84fe58b7253d78",
        "name": "",
        "property": "paired",
        "propertyType": "global",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 390,
        "y": 600,
        "wires": [
            [
                "8e9f9762c7e8fb29"
            ]
        ]
    },
    {
        "id": "8e9f9762c7e8fb29",
        "type": "http request",
        "z": "f91b44df1f91c91f",
        "g": "5e84fe58b7253d78",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "our-server.com/api/v1/device/785421/tasks",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 570,
        "y": 600,
        "wires": [
            [
                "6fe6ec2c0ac23a97"
            ]
        ]
    },
    {
        "id": "e13ccc0703f0efd1",
        "type": "function",
        "z": "f91b44df1f91c91f",
        "g": "5e84fe58b7253d78",
        "name": "function 2",
        "func": "const tasks = msg.payload?.tasks || []\n\nflow.set(\"tasks\", tasks)\n\nif(tasks.length > 0)\n    msg.payload = tasks[0];\n\nreturn msg; ",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 600,
        "wires": [
            [
                "ba694833ea5ff62d"
            ]
        ]
    },
    {
        "id": "6fe6ec2c0ac23a97",
        "type": "json",
        "z": "f91b44df1f91c91f",
        "g": "5e84fe58b7253d78",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 750,
        "y": 600,
        "wires": [
            [
                "e13ccc0703f0efd1"
            ]
        ]
    },
    {
        "id": "ba694833ea5ff62d",
        "type": "switch",
        "z": "f91b44df1f91c91f",
        "g": "5e84fe58b7253d78",
        "name": "parse payload",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "name = \"waterPlant\"",
                "vt": "jsonata"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 180,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "505c812762911485",
        "type": "serial request",
        "z": "f91b44df1f91c91f",
        "g": "5e84fe58b7253d78",
        "name": "",
        "serial": "4aebed7fa574b00d",
        "x": 370,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "e596a3b9ade0f5a7",
        "type": "function",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "Parse Init message",
        "func": "const deviceID = msg.payload.deviceID;\n\nglobal.set(\"deviceID\", deviceID);\n\nmsg.url = `https://potfriend-backend.onrender.com/devices/${deviceID}`;\nmsg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "f85695bcf86d9c61"
            ]
        ]
    },
    {
        "id": "5ff7059934ce5ca9",
        "type": "json",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "df5cfd968fed5abf"
            ]
        ]
    },
    {
        "id": "dcd990d19e1f7917",
        "type": "function",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "Generate pair request",
        "func": "const deviceID = global.get(\"deviceID\");\n\nmsg.url = `https://potfriend-backend.onrender.com/devices/${deviceID}/pair`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 200,
        "wires": [
            [
                "dc0a6be2bf57fb1e"
            ]
        ]
    },
    {
        "id": "f3b598a5e0fb466f",
        "type": "serial in",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "IN",
        "serial": "4aebed7fa574b00d",
        "x": 310,
        "y": 400,
        "wires": [
            [
                "cd6cb4f9d29b8e80"
            ]
        ]
    },
    {
        "id": "b3eb380118ebd413",
        "type": "function",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "Handle set paired",
        "func": "const newPairedDevice = msg.payload;\n\nconst pairedDevcies = global.get(\"Devices\") ?? [];\nconsole.log(pairedDevcies);\npairedDevcies.push({\n    id: newPairedDevice.id,\n    token: \"\",\n    reports: []\n})\n\nglobal.set(\"Devices\", pairedDevcies)\n\nconst pairedConfirmation = {\"targetDeviceID\" : newPairedDevice.id, \"messageType\" : \"pairedSuccessfully\"}\n\nmsg.payload = pairedConfirmation;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 60,
        "wires": [
            [
                "aa6c62498fbc8d0f"
            ]
        ]
    },
    {
        "id": "f1a0749154ad4322",
        "type": "function",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": " Generate report request",
        "func": " \nvar msgsToSend = flow.get(\"messagesToSend\");\n\nif(!msgsToSend)\n    flow.set(\"allMessagesSent\", true);\n\nconst msgToSend = msgsToSend.pop();\n\nif(msgsToSend.length == 0)\n    flow.set(\"allMessagesSent\", true);\n\nmsg.url = `https://potfriend-backend.onrender.com/devices/${msgToSend.payload.deviceID}/report`;\n\nconsole.log(msgToSend);\n\nmsg.payload = {\n    measurementType : \"moisture\",\n    measurementValue : msgToSend.payload.value,\n    unit : \"%\"\n}\nconsole.log(msg.payload);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 500,
        "wires": [
            [
                "1b81ba1b185d7620"
            ]
        ]
    },
    {
        "id": "8ef6f2e598ce6935",
        "type": "serial in",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "IN",
        "serial": "4aebed7fa574b00d",
        "x": 130,
        "y": 120,
        "wires": [
            [
                "5ff7059934ce5ca9"
            ]
        ]
    },
    {
        "id": "df5cfd968fed5abf",
        "type": "function",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "Check incoming message type",
        "func": "const {deviceID, messageType} = msg?.payload;\nconsole.log(msg.payload);\nif(messageType != \"init\")\n    return null\n\nif (!deviceID)\n    return null;\n\nconst pairedDevcies = global.get(\"Devices\") ?? [];\n\nconst device = pairedDevcies.find((device) => device.id === deviceID);\n\nif (device)\n    return null;\n    \nglobal.get(deviceID)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 240,
        "wires": [
            [
                "e596a3b9ade0f5a7"
            ]
        ]
    },
    {
        "id": "aa6c62498fbc8d0f",
        "type": "serial out",
        "z": "f91b44df1f91c91f",
        "g": "9344ba63619b3c33",
        "name": "",
        "serial": "4aebed7fa574b00d",
        "x": 1190,
        "y": 60,
        "wires": []
    },
    {
        "id": "aaf14de934eb9ece",
        "type": "switch",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "",
        "property": "allMessagesSent",
        "propertyType": "flow",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 500,
        "wires": [
            [
                "f1a0749154ad4322"
            ],
            []
        ]
    },
    {
        "id": "ae37b45ed5f72113",
        "type": "debug",
        "z": "f91b44df1f91c91f",
        "g": "4b0f4470b4d73f44",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 420,
        "wires": []
    }
]